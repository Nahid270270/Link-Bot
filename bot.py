# bot.py
import os
import re
import logging
from flask import Flask
from threading import Thread
from pymongo import MongoClient, TEXT
from pyrogram import Client, filters
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message
import requests

# ====== CONFIG ======
API_ID = 12345678  # ЁЯФБ ржЖржкржирж╛рж░ API_ID ржжрж┐ржи
API_HASH = "your_api_hash"  # ЁЯФБ ржЖржкржирж╛рж░ API_HASH ржжрж┐ржи
BOT_TOKEN = "your_bot_token"  # ЁЯФБ ржЖржкржирж╛рж░ BOT_TOKEN ржжрж┐ржи
MONGO_URI = "mongodb+srv://..."  # ЁЯФБ Mongo URI ржжрж┐ржи
IMDB_API_KEY = "your_imdb_api_key"  # ЁЯФБ IMDb API key ржжрж┐ржи
MOVIE_CHANNEL = -1001234567890  # ЁЯФБ ржЖржкржирж╛рж░ ржЪрзНржпрж╛ржирзЗрж▓рзЗрж░ ID (negative sign рж╕рж╣)

ADMINS = [123456789]  # ЁЯФБ ржПржбржорж┐ржиржжрзЗрж░ ржЗржЙржЬрж╛рж░ ржЖржЗржбрж┐

# ====== SETUP ======
bot = Client("MovieBot", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)
mongo = MongoClient(MONGO_URI)
db = mongo.movie_bot
movies = db.movies
users = db.users

try:
    movies.create_index([("title", TEXT)], default_language="none")
except Exception as e:
    print("Index Error:", e)

# ====== IMDb ======
def get_imdb_data(query):
    url = f"https://www.omdbapi.com/?t={query}&apikey={IMDB_API_KEY}"
    try:
        res = requests.get(url).json()
        if res.get("Response") == "True":
            return f"ЁЯОм {res.get('Title')} ({res.get('Year')})\nтнР {res.get('imdbRating')} IMDb\nЁЯЧВя╕П {res.get('Genre')}\nЁЯУЭ {res.get('Plot')}"
    except:
        pass
    return None

# ====== MOVIE SAVE FROM CHANNEL ======
@bot.on_message(filters.channel & filters.chat(MOVIE_CHANNEL) & filters.text)
def save_movie(client, message):
    title_match = re.search(r'^(.+?)\s+(\d{4})', message.text)
    if title_match:
        title = title_match.group(1).strip()
        year = title_match.group(2)
        movie_doc = {
            "title": title.lower(),
            "year": year,
            "caption": message.text,
            "link": message.link
        }
        if not movies.find_one({"title": title.lower()}):
            movies.insert_one(movie_doc)

# ====== SEARCH COMMAND ======
@bot.on_message(filters.private & filters.text & ~filters.command(["start", "delete_all_movies", "delete_movie"]))
def search_movie(client, message):
    query = message.text.lower()
    regex = {"$regex": f".*{re.escape(query)}.*", "$options": "i"}
    results = movies.find({"title": regex}).limit(5)

    if results.count() == 0:
        return message.reply("тЭМ ржорзБржнрж┐ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред")

    buttons = []
    for movie in results:
        imdb = get_imdb_data(movie['title'])
        text = f"{movie['caption']}\n\n{imdb if imdb else ''}"
        btn = InlineKeyboardMarkup([[InlineKeyboardButton("ЁЯУе Download", url=movie['link'])]])
        message.reply(text, reply_markup=btn)

    users.update_one({"_id": message.from_user.id}, {"$set": {"last_query": query}}, upsert=True)

# ====== START ======
@bot.on_message(filters.command("start"))
def start(client, message):
    message.reply("ЁЯСЛ рж╕рзНржмрж╛ржЧрждржо! ржорзБржнрж┐рж░ ржирж╛ржо рж▓рж┐ржЦрзЗ ржЦрзБржБржЬрзБржиред")

# ====== DELETE ALL MOVIES ======
@bot.on_message(filters.command("delete_all_movies") & filters.user(ADMINS))
def delete_all_movies(client, message):
    result = movies.delete_many({})
    message.reply(f"тЬЕ {result.deleted_count}ржЯрж┐ ржорзБржнрж┐ ржбрж┐рж▓рж┐ржЯ рж╣рзЯрзЗржЫрзЗред")

# ====== DELETE BY TITLE ======
@bot.on_message(filters.command("delete_movie") & filters.user(ADMINS))
def delete_movie(client, message: Message):
    if len(message.command) < 2:
        return message.reply("тЪая╕П ржЙржжрж╛рж╣рж░ржг: `/delete_movie avengers`", quote=True)
    title = " ".join(message.command[1:]).lower()
    result = movies.delete_one({"title": {"$regex": f"^{re.escape(title)}$", "$options": "i"}})
    if result.deleted_count:
        message.reply("тЬЕ ржорзБржнрж┐ ржбрж┐рж▓рж┐ржЯ рж╣рзЯрзЗржЫрзЗред")
    else:
        message.reply("тЭМ ржПржоржи ржХрзЛржи ржорзБржнрж┐ ржкрж╛ржЗржирж┐ред")

# ====== FLASK DASHBOARD (Optional Placeholder) ======
app = Flask(__name__)

@app.route('/')
def home():
    total_users = users.count_documents({})
    total_movies = movies.count_documents({})
    return f"<h2>ЁЯУК Movie Bot Stats</h2><p>ЁЯСе Users: {total_users}<br>ЁЯОм Movies: {total_movies}</p>"

def run_flask():
    app.run(host="0.0.0.0", port=8000)

# ====== START EVERYTHING ======
if __name__ == "__main__":
    Thread(target=run_flask).start()
    bot.run()
