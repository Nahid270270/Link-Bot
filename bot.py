from pyrogram import Client, filters
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from pymongo import MongoClient, ASCENDING
from flask import Flask
from threading import Thread
import os
import re
import asyncio
from datetime import datetime
from rapidfuzz import fuzz, process
import logging

# Logging setup
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Configs from environment
API_ID = int(os.getenv("API_ID"))
API_HASH = os.getenv("API_HASH")
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = int(os.getenv("CHANNEL_ID"))
RESULTS_COUNT = int(os.getenv("RESULTS_COUNT", 10))
ADMIN_IDS = list(map(int, os.getenv("ADMIN_IDS", "0").split(",")))
DATABASE_URL = os.getenv("DATABASE_URL")
UPDATE_CHANNEL = os.getenv("UPDATE_CHANNEL", "https://t.me/CTGMovieOfficial")

# Pyrogram Bot
app = Client("movie_bot", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)

# MongoDB setup
mongo = MongoClient(DATABASE_URL)
db = mongo["movie_bot"]
movies_col = db["movies"]
users_col = db["users"]
subscribers_col = db["subscribers"]

# Indexes
movies_col.create_index([("title", ASCENDING)])
movies_col.create_index("message_id")
movies_col.create_index("language")

# Flask for uptime
flask_app = Flask(__name__)
@flask_app.route("/")
def home():
    return "тЬЕ Bot is running!"
Thread(target=lambda: flask_app.run(host="0.0.0.0", port=8080)).start()

# Helpers
def clean_text(text):
    return re.sub(r'[^a-zA-Z0-9]', '', text.lower())

async def delete_message_later(chat_id, message_id, delay=600):
    await asyncio.sleep(delay)
    try:
        await app.delete_messages(chat_id, message_id)
    except Exception as e:
        logger.warning(f"Auto delete failed: {e}")

async def notify_subscribers(movie_title):
    for sub in subscribers_col.find():
        try:
            await app.send_message(sub["user_id"], f"ЁЯОм ржирждрзБржи ржорзБржнрж┐ ржкрзЛрж╕рзНржЯ рж╣рзЯрзЗржЫрзЗ: {movie_title}\n\n{UPDATE_CHANNEL}")
        except Exception as e:
            logger.warning(f"Notify failed for {sub['user_id']}: {e}")

# тЬЕ Save new movie from channel
@app.on_message(filters.channel)
async def save_movie(client, message):
    try:
        if not message.text:
            return
        movie_title = message.text.splitlines()[0]
        movie_data = {
            "title": movie_title.strip(),
            "message_id": message.id,
            "language": "Unknown",
            "posted_at": datetime.utcnow()
        }
        movies_col.insert_one(movie_data)
        logger.info(f"тЬЕ Saved movie: {movie_title}")
        await notify_subscribers(movie_title)
    except Exception as e:
        logger.error(f"тЭМ Movie save failed: {e}")

# тЬЕ Search Handler
@app.on_message(filters.text & ~filters.command(["start", "subscribe", "unsubscribe", "stats", "delete_all_movies", "delete_movie"]) & (filters.private | filters.group))
async def search_handler(client, message):
    query_raw = message.text.strip()
    query_clean = clean_text(query_raw)
    users_col.update_one({"_id": message.from_user.id}, {"$set": {"last_search": datetime.utcnow()}}, upsert=True)
    loading = await message.reply("ЁЯФО ржЕржирзБрж╕ржирзНржзрж╛ржи ржЪрж▓ржЫрзЗ...")
    all_movies = list(movies_col.find({}, {"title": 1, "message_id": 1, "language": 1}))
    exact_matches = [m for m in all_movies if clean_text(m["title"]) == query_clean]
    if exact_matches:
        await loading.delete()
        for m in exact_matches[:RESULTS_COUNT]:
            try:
                fwd = await app.forward_messages(message.chat.id, CHANNEL_ID, m["message_id"])
                await message.reply(f"ЁЯОм {m['title']}\n\nтЪая╕П ржорзЗрж╕рзЗржЬржЯрж┐ рззрзж ржорж┐ржирж┐ржЯ ржкрж░рзЗ ржЕржЯрзЛ ржбрж┐рж▓рж┐ржЯ рж╣ржмрзЗред")
                asyncio.create_task(delete_message_later(message.chat.id, fwd.id))
                await asyncio.sleep(0.5)
            except Exception as e:
                logger.warning(f"Forward failed: {e}")
        return
    choices = {m["title"]: m for m in all_movies}
    fuzzy_results = process.extract(query_raw, choices.keys(), scorer=fuzz.partial_ratio, limit=RESULTS_COUNT)
    filtered = [choices[title] for title, score, _ in fuzzy_results if score >= 70]
    if filtered:
        await loading.delete()
        buttons = [[InlineKeyboardButton(m["title"][:40], callback_data=f"movie_{m['message_id']}")] for m in filtered]
        short_query = query_raw[:30]
        buttons.append([
            InlineKeyboardButton("Bengali", callback_data=f"lang_Bengali_{short_query}"),
            InlineKeyboardButton("Hindi", callback_data=f"lang_Hindi_{short_query}"),
            InlineKeyboardButton("English", callback_data=f"lang_English_{short_query}")
        ])
        await message.reply("ржЖржкржирж╛рж░ ржорзБржнрж┐рж░ рж╕рж╛ржерзЗ ржорж┐рж▓ ржкрж╛ржУрзЯрж╛ ржЧрзЗржЫрзЗ, рж╕рж┐рж▓рзЗржХрзНржЯ ржХрж░рзБржи:", reply_markup=InlineKeyboardMarkup(buttons))
    else:
        await loading.edit("ЁЯШв ржХрж┐ржЫрзБ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐, ржжрзЯрж╛ ржХрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред")
        buttons = [
            [InlineKeyboardButton("тЭМ ржЖржкржирж┐ ржнрзБрж▓ ржирж╛ржо ржжрж┐ржЫрзЗржи", callback_data=f"nofind_wrong_{query_raw[:30]}")],
            [InlineKeyboardButton("тП│ ржорзБржнрж┐ржЯрж╛ ржПржЦржирзЛ ржЖрж╕рзЗржирж┐", callback_data=f"nofind_notyet_{query_raw[:30]}")],
            [InlineKeyboardButton("тЬЕ ржорзБржнрж┐ржЯрж╛ ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржЖржкрж▓рзЛржб ржХрж░рж╛ ржЖржЫрзЗ", callback_data=f"nofind_exist_{query_raw[:30]}")],
            [InlineKeyboardButton("ЁЯЪА ржПржбржорж┐ржи ржЕржирзЗржХ рждрж╛ржбрж╝рж╛рждрж╛ржбрж╝рж┐ ржПржЗ ржорзБржнрж┐ ржбрж╛ржЙржирж▓рзЛржб ржХрж░ржмрзЗ", callback_data=f"nofind_soon_{query_raw[:30]}")],
        ]
        await message.reply("ржЖржкржирж╛рж░ ржорзБржнрж┐ржЯрж┐ ржЦрзБржБржЬрзЗ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред ржирж┐ржЪрзЗрж░ ржЕржкрж╢ржиржЧрзБрж▓рзЛрж░ ржпрзЗржХрзЛржирзЛ ржПржХржЯрж┐ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи:", reply_markup=InlineKeyboardMarkup(buttons))

# тЬЕ Callback handler
@app.on_callback_query()
async def callback_handler(client, callback):
    data = callback.data
    if data.startswith("movie_"):
        msg_id = int(data.split("_")[1])
        try:
            fwd = await app.forward_messages(callback.message.chat.id, CHANNEL_ID, msg_id)
            await callback.answer("тЬЕ ржорзБржнрж┐ ржкрж╛ржарж╛ржирзЛ рж╣ржпрж╝рзЗржЫрзЗ!")
            asyncio.create_task(delete_message_later(callback.message.chat.id, fwd.id))
        except Exception as e:
            await callback.answer("тЭМ ржорзБржнрж┐ ржкрж╛ржарж╛ржирзЛ ржпрж╛ржпрж╝ржирж┐ред", show_alert=True)
            logger.error(f"Forward error: {e}")
    elif data.startswith("lang_"):
        lang = data.split("_")[1]
        query = "_".join(data.split("_")[2:])
        lang_movies = list(movies_col.find({"language": lang}))
        choices = {m["title"]: m for m in lang_movies}
        fuzzy_results = process.extract(query, choices.keys(), scorer=fuzz.partial_ratio, limit=RESULTS_COUNT)
        filtered = [choices[title] for title, score, _ in fuzzy_results if score >= 70]
        if filtered:
            buttons = [[InlineKeyboardButton(m["title"][:40], callback_data=f"movie_{m['message_id']}")] for m in filtered]
            await callback.message.edit_text(f"ЁЯФН ржнрж╛рж╖рж╛: {lang} ржПрж░ ржлрж▓рж╛ржлрж▓:", reply_markup=InlineKeyboardMarkup(buttons))
        else:
            await callback.answer("тЭМ ржХрзЛржирзЛ ржлрж▓рж╛ржлрж▓ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред", show_alert=True)
    elif data.startswith("nofind_"):
        reason, query = data.split("_")[1], "_".join(data.split("_")[2:])
        user = callback.from_user
        reason_text = {
            "wrong": "тЭМ ржЖржкржирж┐ ржнрзБрж▓ ржирж╛ржо ржжрж┐ржЫрзЗржи",
            "notyet": "тП│ ржорзБржнрж┐ржЯрж╛ ржПржЦржирзЛ ржЖрж╕рзЗржирж┐",
            "exist": "тЬЕ ржорзБржнрж┐ржЯрж╛ ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржЖржкрж▓рзЛржб ржХрж░рж╛ ржЖржЫрзЗ",
            "soon": "ЁЯЪА ржПржбржорж┐ржи ржЕржирзЗржХ рждрж╛ржбрж╝рж╛рждрж╛ржбрж╝рж┐ ржПржЗ ржорзБржнрж┐ ржбрж╛ржЙржирж▓рзЛржб ржХрж░ржмрзЗ"
        }.get(reason, "Unknown")
        for admin_id in ADMIN_IDS:
            try:
                await app.send_message(
                    admin_id,
                    f"ЁЯУй ржирждрзБржи рж░рж┐ржкрзЛрж░рзНржЯ ржПрж╕рзЗржЫрзЗ:\n\nЁЯСд ржЗржЙржЬрж╛рж░: {user.first_name} (@{user.username}) [{user.id}]\nЁЯФО рж╕рж╛рж░рзНржЪ ржХрзАржУржпрж╝рж╛рж░рзНржб: {query}\nЁЯУЛ ржХрж╛рж░ржг: {reason_text}"
                )
            except Exception as e:
                logger.error(f"Admin notify failed: {e}")
        await callback.answer("тЬЕ ржПржбржорж┐ржиржХрзЗ ржЬрж╛ржирж╛ржирзЛ рж╣ржпрж╝рзЗржЫрзЗред ржзржирзНржпржмрж╛ржжред", show_alert=True)

# тЬЕ Subscribe command
@app.on_message(filters.command("subscribe") & (filters.private | filters.group))
async def subscribe(client, message):
    user_id = message.from_user.id
    if not subscribers_col.find_one({"user_id": user_id}):
        subscribers_col.insert_one({"user_id": user_id})
        await message.reply("тЬЕ рж╕рж╛ржмрж╕рзНржХрзНрж░рж┐ржкрж╢ржи рж╕ржлрж▓ред")
    else:
        await message.reply("тД╣я╕П ржЖржкржирж┐ ржЗрждрж┐ржоржзрзНржпрзЗ рж╕рж╛ржмрж╕рзНржХрзНрж░рж╛ржЗржм ржХрж░рзЗржЫрзЗржиред")

# тЬЕ Unsubscribe command
@app.on_message(filters.command("unsubscribe") & (filters.private | filters.group))
async def unsubscribe(client, message):
    subscribers_col.delete_one({"user_id": message.from_user.id})
    await message.reply("тЭМ ржЖржкржирж┐ ржЖржирж╕рж╛ржмрж╕рзНржХрзНрж░рж╛ржЗржм ржХрж░рзЗржЫрзЗржиред")

# тЬЕ Stats command
@app.on_message(filters.command("stats") & (filters.private | filters.group))
async def stats(client, message):
    stats_text = (
        f"ЁЯУК ржкрж░рж┐рж╕ржВржЦрзНржпрж╛ржи:\n"
        f"ЁЯСд ржЗржЙржЬрж╛рж░: {users_col.count_documents({})}\n"
        f"ЁЯФФ рж╕рж╛ржмрж╕рзНржХрзНрж░рж╛ржЗржмрж╛рж░: {subscribers_col.count_documents({})}\n"
        f"ЁЯОм ржорзБржнрж┐: {movies_col.count_documents({})}"
    )
    await message.reply(stats_text)

# тЬЕ Delete all movies (admin only)
@app.on_message(filters.command("delete_all_movies") & filters.user(ADMIN_IDS))
async def delete_all_movies(client, message):
    result = movies_col.delete_many({})
    await message.reply(f"ЁЯЧСя╕П ржорзЛржЯ {result.deleted_count}ржЯрж┐ ржорзБржнрж┐ ржбрж┐рж▓рж┐ржЯ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред")

# тЬЕ Delete specific movie (admin only)
@app.on_message(filters.command("delete_movie") & filters.user(ADMIN_IDS))
async def delete_movie(client, message):
    if len(message.command) < 2:
        await message.reply("тЪая╕П ржжржпрж╝рж╛ ржХрж░рзЗ ржПржХржЯрж┐ ржорзБржнрж┐рж░ ржирж╛ржо ржжрж┐ржиред ржпрзЗржоржи:\n`/delete_movie Avengers`")
        return
    title_query = " ".join(message.command[1:]).strip().lower()
    all_movies = list(movies_col.find({}, {"_id": 1, "title": 1}))
    to_delete = None
    for movie in all_movies:
        if movie["title"].lower() == title_query:
            to_delete = movie["_id"]
            break
    if to_delete:
        movies_col.delete_one({"_id": to_delete})
        await message.reply("тЬЕ ржорзБржнрж┐ржЯрж┐ рж╕ржлрж▓ржнрж╛ржмрзЗ ржбрж┐рж▓рж┐ржЯ рж╣ржпрж╝рзЗржЫрзЗред")
    else:
        await message.reply("тЭМ ржорзБржнрж┐ржЯрж┐ ржЦрзБржБржЬрзЗ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред")

# тЬЕ Start command
@app.on_message(filters.command("start") & (filters.private | filters.group))
async def start(client, message):
    await message.reply(
        f"рж╣рзНржпрж╛рж▓рзЛ {message.from_user.first_name}!\n"
        "ржЖржорж┐ ржПржХржЯрж┐ ржорзБржнрж┐ рж╕рж╛рж░рзНржЪ ржмржЯред рж╢рзБржзрзБ ржорзБржнрж┐рж░ ржирж╛ржо рж▓рж┐ржЦрзЛ, ржЖржорж┐ ржЦрзБржБржЬрзЗ ржжрж┐ржмрзЛред\n"
        f"ЁЯФФ ржЖржкржбрзЗржЯ ржкрзЗрждрзЗ: {UPDATE_CHANNEL}"
    )

# тЬЕ Run bot
app.run()
