# тЬЕ Import libraries
from pyrogram import Client, filters
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from pymongo import MongoClient, ASCENDING
from flask import Flask
from threading import Thread
import os
import re
import asyncio
from datetime import datetime
from rapidfuzz import fuzz, process
import logging

# тЬЕ Logging setup
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# тЬЕ Configs from environment
API_ID = int(os.getenv("API_ID"))
API_HASH = os.getenv("API_HASH")
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = int(os.getenv("CHANNEL_ID"))
RESULTS_COUNT = int(os.getenv("RESULTS_COUNT", 10))
ADMIN_IDS = list(map(int, os.getenv("ADMIN_IDS", "0").split(",")))
DATABASE_URL = os.getenv("DATABASE_URL")
UPDATE_CHANNEL = os.getenv("UPDATE_CHANNEL", "https://t.me/CTGMovieOfficial")

# тЬЕ Pyrogram Bot
app = Client("movie_bot", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)

# тЬЕ MongoDB setup
mongo = MongoClient(DATABASE_URL)
db = mongo["movie_bot"]
movies_col = db["movies"]
users_col = db["users"]
subscribers_col = db["subscribers"]

# тЬЕ Indexes
movies_col.create_index([("title", ASCENDING)])
movies_col.create_index("message_id")
movies_col.create_index("language")

# тЬЕ Flask for uptime
flask_app = Flask(__name__)

@flask_app.route("/")
def home():
    return "тЬЕ Bot is running!"

Thread(target=lambda: flask_app.run(host="0.0.0.0", port=8080)).start()

# тЬЕ Helpers
def clean_text(text):
    return re.sub(r'[^a-zA-Z0-9]', '', text.lower())

async def delete_message_later(chat_id, message_id, delay=600):
    await asyncio.sleep(delay)
    try:
        await app.delete_messages(chat_id, message_id)
    except Exception as e:
        logger.warning(f"Auto delete failed: {e}")

async def notify_subscribers(movie_title):
    for sub in subscribers_col.find():
        try:
            await app.send_message(sub["user_id"], f"ЁЯОм ржирждрзБржи ржорзБржнрж┐ ржкрзЛрж╕рзНржЯ рж╣рзЯрзЗржЫрзЗ: {movie_title}\n\n{UPDATE_CHANNEL}")
        except Exception as e:
            logger.warning(f"Notify failed for {sub['user_id']}: {e}")

# тЬЕ Save new movie from channel
@app.on_message(filters.channel)
async def save_movie(client, message):
    try:
        if not message.text:
            return
        movie_title = message.text.splitlines()[0]
        movie_data = {
            "title": movie_title.strip(),
            "message_id": message.id,
            "language": "Unknown",
            "posted_at": datetime.utcnow()
        }
        movies_col.insert_one(movie_data)
        logger.info(f"тЬЕ Saved movie: {movie_title}")
        await notify_subscribers(movie_title)
    except Exception as e:
        logger.error(f"тЭМ Movie save failed: {e}")

# тЬЕ Search Handler
@app.on_message(filters.text & ~filters.command(["start", "subscribe", "unsubscribe", "stats", "delete_movie", "delete_all_movies"]) & (filters.private | filters.group))
async def search_handler(client, message):
    query_raw = message.text.strip()
    query_clean = clean_text(query_raw)
    users_col.update_one({"_id": message.from_user.id}, {"$set": {"last_search": datetime.utcnow()}}, upsert=True)
    loading = await message.reply("ЁЯФО ржЕржирзБрж╕ржирзНржзрж╛ржи ржЪрж▓ржЫрзЗ...")
    all_movies = list(movies_col.find({}, {"title": 1, "message_id": 1, "language": 1}))
    exact_matches = [m for m in all_movies if clean_text(m["title"]) == query_clean]

    if exact_matches:
        await loading.delete()
        for m in exact_matches[:RESULTS_COUNT]:
            try:
                fwd = await app.forward_messages(message.chat.id, CHANNEL_ID, m["message_id"])
                await message.reply(f"ЁЯОм {m['title']}\n\nтЪая╕П ржорзЗрж╕рзЗржЬржЯрж┐ рззрзж ржорж┐ржирж┐ржЯ ржкрж░рзЗ ржЕржЯрзЛ ржбрж┐рж▓рж┐ржЯ рж╣ржмрзЗред")
                asyncio.create_task(delete_message_later(message.chat.id, fwd.id))
                await asyncio.sleep(0.5)
            except Exception as e:
                logger.warning(f"Forward failed: {e}")
        return

    choices = {m["title"]: m for m in all_movies}
    fuzzy_results = process.extract(query_raw, choices.keys(), scorer=fuzz.partial_ratio, limit=RESULTS_COUNT)
    filtered = [choices[title] for title, score, _ in fuzzy_results if score >= 70]

    if filtered:
        await loading.delete()
        buttons = [[InlineKeyboardButton(m["title"][:40], callback_data=f"movie_{m['message_id']}")] for m in filtered]
        await message.reply("ржЖржкржирж╛рж░ ржорзБржнрж┐рж░ рж╕рж╛ржерзЗ ржорж┐рж▓ ржкрж╛ржУрзЯрж╛ ржЧрзЗржЫрзЗ, рж╕рж┐рж▓рзЗржХрзНржЯ ржХрж░рзБржи:", reply_markup=InlineKeyboardMarkup(buttons))
    else:
        await loading.delete()
        for admin_id in ADMIN_IDS:
            try:
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("тЭМ ржЖржкржирж┐ ржнрзБрж▓ ржирж╛ржо ржжрж┐ржЫрзЗржи", callback_data=f"reply_wrong_{message.from_user.id}_{query_raw[:30]}")],
                    [InlineKeyboardButton("тП│ ржорзБржнрж┐ржЯрж╛ ржПржЦржирзЛ ржЖрж╕рзЗржирж┐", callback_data=f"reply_notyet_{message.from_user.id}_{query_raw[:30]}")],
                    [InlineKeyboardButton("тЬЕ ржорзБржнрж┐ржЯрж╛ ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржЖржЫрзЗ", callback_data=f"reply_exist_{message.from_user.id}_{query_raw[:30]}")],
                    [InlineKeyboardButton("ЁЯЪА ржорзБржнрж┐ ржЖрж╕ржЫрзЗ рж╢рж┐ржЧржЧрж┐рж░ржЗ", callback_data=f"reply_soon_{message.from_user.id}_{query_raw[:30]}")],
                ])
                await app.send_message(admin_id, f"ЁЯСд ржЗржЙржЬрж╛рж░: {message.from_user.first_name} (@{message.from_user.username}) [{message.from_user.id}]\nЁЯФН рж╕рж╛рж░рзНржЪ: {query_raw}\nЁЯУЛ Action required: ржирж┐ржЪрзЗ ржмрж╛ржЯржи ржЖржЫрзЗ, ржмрзЗржЫрзЗ ржирж┐ржиред", reply_markup=keyboard)
            except Exception as e:
                logger.error(f"Failed to notify admin: {e}")
        await message.reply("ЁЯШв ржХрж┐ржЫрзБ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐, ржжрзЯрж╛ ржХрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред ржЖржкржирж╛рж░ ржЕржирзБрж░рзЛржзржЯрж┐ ржПржбржорж┐ржиржжрзЗрж░ ржЬрж╛ржирж╛ржирзЛ рж╣ржпрж╝рзЗржЫрзЗред")

# тЬЕ Callback handler
@app.on_callback_query()
async def callback_handler(client, callback):
    data = callback.data

    if data.startswith("movie_"):
        msg_id = int(data.split("_")[1])
        try:
            fwd = await app.forward_messages(callback.message.chat.id, CHANNEL_ID, msg_id)
            await callback.answer("тЬЕ ржорзБржнрж┐ ржкрж╛ржарж╛ржирзЛ рж╣ржпрж╝рзЗржЫрзЗ!")
            asyncio.create_task(delete_message_later(callback.message.chat.id, fwd.id))
        except Exception as e:
            await callback.answer("тЭМ ржорзБржнрж┐ ржкрж╛ржарж╛ржирзЛ ржпрж╛ржпрж╝ржирж┐ред", show_alert=True)
            logger.error(f"Forward error: {e}")

    elif data.startswith("reply_"):
        _, reason, user_id, query = data.split("_", 3)
        response_map = {
            "wrong": "тЭМ ржПржбржорж┐ржи ржЬрж╛ржирж┐ржпрж╝рзЗржЫрзЗ: ржЖржкржирж┐ ржнрзБрж▓ ржирж╛ржо ржжрж┐ржЫрзЗржиред",
            "notyet": "тП│ ржПржбржорж┐ржи ржЬрж╛ржирж┐ржпрж╝рзЗржЫрзЗ: ржорзБржнрж┐ржЯрж╛ ржПржЦржирзЛ ржЖрж╕рзЗржирж┐ред",
            "exist": "тЬЕ ржПржбржорж┐ржи ржЬрж╛ржирж┐ржпрж╝рзЗржЫрзЗ: ржорзБржнрж┐ржЯрж╛ ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржЖржкрж▓рзЛржб ржХрж░рж╛ ржЖржЫрзЗ, рж╕ржарж┐ржХ ржирж╛ржо ржжрж┐ржиред",
            "soon": "ЁЯЪА ржПржбржорж┐ржи ржЬрж╛ржирж┐ржпрж╝рзЗржЫрзЗ: ржорзБржнрж┐ржЯрж╛ рж╢рж┐ржЧржЧрж┐рж░ ржЖржкрж▓рзЛржб ржХрж░рж╛ рж╣ржмрзЗред"
        }
        try:
            await app.send_message(int(user_id), response_map.get(reason, "тЪая╕П ржПржбржорж┐ржирзЗрж░ ржХрж╛ржЫ ржерзЗржХрзЗ ржЙрждрзНрждрж░ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред"))
            await callback.answer("тЬЕ ржЗржЙржЬрж╛рж░ржХрзЗ ржЬрж╛ржирж╛ржирзЛ рж╣ржпрж╝рзЗржЫрзЗред")
        except Exception as e:
            logger.error(f"Failed to reply to user: {e}")
            await callback.answer("тЭМ ржЗржЙржЬрж╛рж░ржХрзЗ ржЬрж╛ржирж╛ржирзЛ ржпрж╛ржпрж╝ржирж┐ред", show_alert=True)

# тЬЕ Admin-only delete commands
@app.on_message(filters.command("delete_all_movies") & filters.user(ADMIN_IDS))
async def delete_all_movies(client, message):
    movies_col.delete_many({})
    await message.reply("ЁЯЧСя╕П рж╕ржм ржорзБржнрж┐ ржбрж┐рж▓рж┐ржЯ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред")

@app.on_message(filters.command("delete_movie") & filters.user(ADMIN_IDS))
async def delete_movie(client, message):
    if len(message.command) < 2:
        return await message.reply("тЪая╕П ржмрзНржпржмрж╣рж╛рж░: /delete_movie <movie name>")
    query = " ".join(message.command[1:]).lower()
    result = movies_col.delete_one({"title": {"$regex": query, "$options": "i"}})
    if result.deleted_count:
        await message.reply("тЬЕ ржорзБржнрж┐ ржбрж┐рж▓рж┐ржЯ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред")
    else:
        await message.reply("тЭМ ржорзБржнрж┐ ржЦрзБржБржЬрзЗ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред")

# тЬЕ Subscribe / Unsubscribe / Stats / Start
@app.on_message(filters.command("subscribe") & (filters.private | filters.group))
async def subscribe(client, message):
    user_id = message.from_user.id
    if not subscribers_col.find_one({"user_id": user_id}):
        subscribers_col.insert_one({"user_id": user_id})
        await message.reply("тЬЕ рж╕рж╛ржмрж╕рзНржХрзНрж░рж┐ржкрж╢ржи рж╕ржлрж▓ред")
    else:
        await message.reply("тД╣я╕П ржЖржкржирж┐ ржЗрждрж┐ржоржзрзНржпрзЗ рж╕рж╛ржмрж╕рзНржХрзНрж░рж╛ржЗржм ржХрж░рзЗржЫрзЗржиред")

@app.on_message(filters.command("unsubscribe") & (filters.private | filters.group))
async def unsubscribe(client, message):
    subscribers_col.delete_one({"user_id": message.from_user.id})
    await message.reply("тЭМ ржЖржкржирж┐ ржЖржирж╕рж╛ржмрж╕рзНржХрзНрж░рж╛ржЗржм ржХрж░рзЗржЫрзЗржиред")

@app.on_message(filters.command("stats") & (filters.private | filters.group))
async def stats(client, message):
    stats_text = (
        f"ЁЯУК ржкрж░рж┐рж╕ржВржЦрзНржпрж╛ржи:\n"
        f"ЁЯСд ржЗржЙржЬрж╛рж░: {users_col.count_documents({})}\n"
        f"ЁЯФФ рж╕рж╛ржмрж╕рзНржХрзНрж░рж╛ржЗржмрж╛рж░: {subscribers_col.count_documents({})}\n"
        f"ЁЯОм ржорзБржнрж┐: {movies_col.count_documents({})}"
    )
    await message.reply(stats_text)

@app.on_message(filters.command("start") & (filters.private | filters.group))
async def start(client, message):
    await message.reply(
        f"рж╣рзНржпрж╛рж▓рзЛ {message.from_user.first_name}!\n"
        "ржЖржорж┐ ржПржХржЯрж┐ ржорзБржнрж┐ рж╕рж╛рж░рзНржЪ ржмржЯред рж╢рзБржзрзБ ржорзБржнрж┐рж░ ржирж╛ржо рж▓рж┐ржЦрзЛ, ржЖржорж┐ ржЦрзБржБржЬрзЗ ржжрж┐ржмрзЛред\n"
        f"ЁЯФФ ржЖржкржбрзЗржЯ ржкрзЗрждрзЗ: {UPDATE_CHANNEL}"
    )

# тЬЕ Run bot
app.run()
